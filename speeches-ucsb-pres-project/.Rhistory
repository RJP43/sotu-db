install.packages("tidytext")
library(dplyr)
text_df <- data_frame(line = 1:4, text = text)
text_df <- data_frame(line = 1:4, text = text)
load("C:/Users/tnmon/Desktop/sotu-db/speeches - gutenberg/2016-Obama.txt")
load("~/LUC/SOTU-DB/speeches - gutenberg/1965-Johnson.txt")
library(dplyr)
text_df <- data_frame(line = 1:4, text = text)
text_df
text_df <- data_frame(line = 1:4, text = text)
text_df <- tibble(1:5)
View(text_df)
install.packages("formatR", repos = "http://cran.us.r-project.org")
install.packages(c("tidyverse", "tidytext", "glue", "stringr", "tm"))
install.packages(c("tidyverse", "tidytext", "glue", "stringr", "tm"))
install.packages("SentimentAnalysis")
# install.packages("SentimentAnalysis")
library(SentimentAnalysis)
library(tm)
setwd("C:\Users\tnmon\git\sotu-db\speeches-ucsb-pres-project")
setwd("C:/Users/tnmon/git/sotu-db/speeches-ucsb-pres-project")
SOTUs = Corpus(DirSource*"./")
SOTUs = Corpus(DirSource*("./"))
SOTUs = Corpus(DirSource("./"))
sentiment = analyzeSentiment(SOTUs)
dtm = preprocessCorpus(SOTUs)
convertToDirection(analyzeSentiment(dtm)$SentimentQDAP)
SOTUs = Corpus(DirSource("./"))
dtm = preprocessCorpus(SOTUs)
sentiment = analyzeSentiment(SOTUs)
sentiment$SentimentQDAP
table(convertToBinaryResponse(sentiment$SentimentLM))
dtm[[which.max(sentiment$SentimentLM)]]$meta$heading
SOTUs[[which.max(sentiment$SentimentLM)]]$meta$heading
SOTUs[[which.max(sentiment$SentimentLM)]]$heading
SOTUs[[which.max(sentiment$SentimentLM)]]
# View summary statistics of sentiment variable
summary(sentiment$SentimentLM)
# Visualize distribution of standardized sentiment variable
hist(scale(sentiment$SentimentLM))
# Compute cross-correlation
cor(sentiment[, c("SentimentLM", "SentimentHE", "SentimentQDAP")])
countWords(documents)
countWords(SOTUs)
countWords(SOTUs, removeStopwords=FALSE)
install.packages("sentimentr")
plotSentiment(sentiment, x = NULL, cumsum = FALSE, xlab = "SOTU",
ylab = "Sentiment")
View(sentiment)
plotSentiment(sentiment, x = NULL, cumsum = FALSE, xlab = "SOTU",
ylab = "Sentiment")+
ggtitle("Evolving sentiment")
library (ggplot2)
plotSentiment(sentiment, x = NULL, cumsum = FALSE, xlab = "SOTU",
ylab = "Sentiment")+
ggtitle("Evolving sentiment")
plotSentiment(sentiment, x = NULL, cumsum = FALSE, xlab = "SOTU",
ylab = "Sentiment")+
ggtitle("Sentiment in State of the Union addresses")
plotSentiment(sentiment, x = NULL, cumsum = FALSE, xlab = "SOTU",
ylab = "Sentiment")+
ggtitle("Sentiment in State of the Union addresses")+
theme_void()
plotSentiment(sentiment, x = NULL, cumsum = FALSE, xlab = "SOTU",
ylab = "Sentiment")+
ggtitle("Sentiment in State of the Union addresses")
preprocessCorpus(SOTUs, language = "english", stemming = TRUE,
verbose = TRUE, removeStopwords = TRUE)
ruleSentiment(dtm, d)
ruleSentiment(dtm, SentimentDictionaryWeighted)
ruleSentiment(dtm, SentimentDictionary)
ruleSentiment(dtm, SentimentDictionaryBinary)
data("DictionaryGI")
data(DictionaryGI)
remove(DictionaryGI)
data(DictionaryGI)
View(DictionaryGI)
str(DictionaryGI)
dict.GI <- loadDictionaryGI()
View(dict.GI)
View(dict.GI)
ruleSentiment(dtm, dict.GI)
ruleSentiment(dtm, DictionaryGI)
ruleSentiment(dtm, dict.GI)
SentimentDictionaryBinary(dict.GI)
SentimentDictionaryBinary(DictionaryGI)
d= SentimentDictionaryBinary(DictionaryGI)
d = SentimentDictionaryBinary(DictionaryGI$positive)
d = SentimentDictionaryBinary(DictionaryGI$positive),
(DictionaryGI$negative)
d = SentimentDictionaryBinary(DictionaryGI$positive,DictionaryGI$negative)
ruleSentiment(dtm, d)
View(d)
SOTUs = Corpus(DirSource("./"))
dtm = preprocessCorpus(SOTUs)
ruleSentiment(dtm, d)
View(dtm)
getwd()
dtm[["21"]][["content"]]
analyzeSentiment(dtm)
plotSentiment(sentiment$SentimentLM)
plotSentiment(sentiment, x = NULL, cumsum = FALSE, xlab = "SOTU",
ylab = "Sentiment")+
ggtitle("Sentiment in State of the Union addresses")
